/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ec.edu.espol.workshops;

import java.util.Scanner;
import java.lang.ClassCastException;

//CAR INSURANCE CLASS 
public class CarInsurance {
<<<<<<< HEAD
	private int age; //AGE NEEDED FOR CAR INSURANCE
	private char sex; //SEX NEEDED FOR CAR INSURANCE
	private boolean married; //MARRIED STATUS NEEDED FOR CAR INSURANCE
	private final int BASE_PREMIUM = 500; //BASE_PREMIUM NEEDED FOR CAR INSURANCE
=======
	private int age;
	private char sex;
	private boolean married;
	private static int BASE_PREMIUM = 500;
>>>>>>> fb4496e9db3524783241f87ec5f3c936fcece0c1
	
	//CONSTRUCTOR FOR CARINSURANCE
	public CarInsurance(int age, char sex, boolean married) {
		this.age = age;
		this.sex = sex;
		this.married = married;
	}
	
	//GETTERS AGE OF CUSTOMER
	public int getAge() {
		return this.age;
	}
	
	//SET AGE OF CUSTOMER
	public void setAge(int age) {
		this.age = age;
	}
	
	//GET SEX OF CUSTOMER
	public char getSex() {
		return this.sex;
	}
	
	//SET SEX OF CUSTOMER
	public void setSex(char sex) {
		this.sex = sex;
	}
	
	//GET MARRIED STATUS OF CUSTOMER
	public boolean getMarried() {
		return this.married;
	}
	
	//SET MARRIED STATUS OF CUSTOMER
	public void setMarried(boolean married) {
		this.married = married;
	}
	
	//GET BASE PREMIUM OF CUSTOMER
	public int getBasePremium() {
		return CarInsurance.BASE_PREMIUM;
	}
	
	//CONVERT TO STRING FIELDS OF CUSTOMER
	@Override
	public String toString() {
		return "\nage: " + this.age + " sex: " + this.sex + " married: " + this.married; 
	}
	
	//CALCULATE PREMIUM DEPENDING IN FIELDS OF CUSTOMER
	public int premiumCalculation(CarInsurance customer) {
		int premiumValue = CarInsurance.BASE_PREMIUM;
		if(customer.getAge()<25 && customer.getSex() == 'M' && !customer.getMarried()) {
			premiumValue += 1500;
		}else if(customer.getSex() == 'F' || customer.getMarried()){
			premiumValue -= 200;
		}else if(customer.getAge()>=45 && customer.getAge()<65) {
			premiumValue -= 100;
		}
		return premiumValue;
	}
	
	//CHECK THE AGE OF CUSTOMER AND LICENSE'VALIDATION FOR INSURANCE
	public boolean isValidCarInsurance(CarInsurance customer, boolean validCard) {
		if(customer.getAge() >= 80) {
			printInfo(
					"   ------------------------------------------\n"
					+ "Sorry, we cannot sell car insurance to people over 80 years old.\n"
					+ "   ------------------------------------------\n"
			);
			return false;
		}else if(!validCard) {
			printInfo(
					"   ------------------------------------------\n"
					+ "Sorry, your driving licence is invalid.\n"
					+ "   ------------------------------------------\n"
			);
			return false;
		}
		return true;
		
	}
	
	//CHECK IF FIELDS OF CUSTOMER ARE CORRECTS 
	public static int checkInformation(String age, char sex, char married, char validCard) {
		try {
			if(Integer.parseInt(age) > 0 && (sex == 'F' || sex == 'M') && (married == 'T' || married == 'F') && (validCard == 'T' || validCard == 'F')) {
				return 0;
			}else {
				return -1;
			}
<<<<<<< HEAD
		}catch(ClassCastException ex) {
			printInfo(ex.getMessage());
			return -1;
		}	
=======
			return -1;	
		} catch (RuntimeException e) {
			throw new RuntimeException("Couldn't process stuff", e);
		} catch (Exception e) {
			throw new RuntimeException("Something failed!", e);
		}
>>>>>>> fb4496e9db3524783241f87ec5f3c936fcece0c1
	}
	
	//CONVERT CHARACTER TYPE TO BOOL TYPE
	public static boolean convertCharToBool(char arg) {
		boolean argBool = false;
		if(arg == 'T') {
			argBool = true;
		}
		return argBool;
	}
	
	//GET CAR INSURANCE FROM A GIVEN CUSTOMER
	public static void initCarInsurance() {
		Scanner sc = new Scanner(System.in);
		printInfo("     *****   Premium Calculation   *****");
		printInfo("	Please input age: ");
		String age = sc.next();
		printInfo("	Please input sex (M) or (F): ");
		char sex = Character.toUpperCase(sc.next().charAt(0));
		printInfo("	Please indicate if you are married (T) or not (F): ");
		char married = Character.toUpperCase(sc.next().charAt(0));
		printInfo("	Please confirm if the driving license is valid (T) or invalid (F): ");
		char validCard = Character.toUpperCase(sc.next().charAt(0));
		sc.close();
<<<<<<< HEAD
		if(CarInsurance.checkInformation(age, sex, married, validCard) >= 0) {
			CarInsurance premium = new CarInsurance(Integer.parseInt(age), sex, CarInsurance.convertCharToBool(married));
			if (premium.isValidCarInsurance(premium, CarInsurance.convertCharToBool(validCard))) {
				int premiumValue = premium.premiumCalculation(premium);
				printInfo(
						"   ------------------------------------------\n"
						+ "The car insurance premium is: $" + premiumValue + "\n"
						+ "   ------------------------------------------\n"
				);
			}
		}else {
			printInfo(
					"   ------------------------------------------\n"
					+ "Invalid data. Cannot proceed with calculation\n"
					+ "   ------------------------------------------\n"
			);
		}
	}
	
	//PRINT OUT SOME INFORMATION
	public static void printInfo(String string) {
		System.out.print(string);
=======
		
		if(CarInsurance.checkInformation(age, sex, married, validCard) >= 0) {
			CarInsurance premium = new CarInsurance(Integer.parseInt(age), sex, CarInsurance.convertCharToBool(married));
			if (premium.isValidCarInsurance(premium, CarInsurance.convertCharToBool(validCard))) {
				premiumValue = premium.premiumCalculation(premium);
				System.out.println("   ------------------------------------------ ");
				System.out.println("     The car insurance premium is: $ " + premiumValue);
				System.out.println("   ------------------------------------------ ");
			} 
		} else {
			System.out.println("   ------------------------------------------ ");
			System.out.println("	Invalid data. Cannot proceed with calculation");
			System.out.println("   ------------------------------------------ ");
		}
		
>>>>>>> fb4496e9db3524783241f87ec5f3c936fcece0c1
	}
	
	//MAIN METHOD OF THE PROGRAM
	public static void main(String[] args) {
		printInfo("Guardado 1");
		initCarInsurance();
	}
	
}
